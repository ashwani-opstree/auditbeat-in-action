- hosts: all
  remote_user: ubuntu
  become: true
  gather_facts: yes


  vars_files:
    - variables.yml


  vars:
      kibana_basic_auth: "{{ attendee_user }}:{{ attendee_password  }}"


  pre_tasks:
    - name: Install Python2 to make Ansible work
      raw: sudo apt-get update && sudo apt-get -y install python-minimal


  tasks:


    # System
    - name: Update and upgrade apt packages
      apt: upgrade=dist

    - name: Install auditd, which this example is about
      apt: name=auditd

    - name: Install NTP to avoid time drift and PIP to manage Python dependencies plus its build tools
      apt: name={{ item }}
      with_items:
        - ntp
        - ntpdate
        - python3-pip
        - build-essential
        - libssl-dev
        - libffi-dev
        - whois

    - name: Install the pyOpenSSL library, so Ansible can use it to check TLS certificates
      pip: name=pyopenssl


    # Allow SSH logins
    - name: Add a group for developers
      group:
        name: developers
        state: present

    - name: Add a regular user
      user:
        name: elastic-user
        password: $6$l7Sn6bScWFQXiC$YuhNHLTFpFrbKWu41aSGmgPkPYusesxsUEX01p8fkO2rApuVnutQVpx1JqJWXYS9eCrfo7oVsNT2PjLQ2lFOv1 #secret
        groups: developers
        shell: /bin/bash
        state: present

    - name: Create a file for that specific user only readable by them
      template: src=templates/secret.txt dest=/home/elastic-user/secret.txt owner=elastic-user mode=0600

    - name: Add a root user
      user:
        name: elastic-admin
        password: $6$7z7Vma3Wv9Au$F2xYkqbDztG/o1sd7bHYeIq5.m73ueq1NmCd5mZMFIWg1ENgUFQK0FR01b3/DOX204KfZ1rH4z2Il1layxTgv1 #mysecret
        groups: sudo
        shell: /bin/bash
        state: present

    - name: Allow password based authentication for SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: 'PasswordAuthentication yes'
        state: present

    - name: Allow our users to log in via SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^AllowUsers'
        line: 'AllowUsers ubuntu elastic-user elastic-admin'
        state: present

    - name: Restart SSH
      service: name=ssh state=restarted


    # Global Elasticsearch configuration
    - name: Register a global index template
      uri:
        url: "{{elasticsearch_host}}_template/template_global"
        body_format: json
        method: PUT
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_password }}"
        body:
          template: "*"
          settings:
            number_of_shards: 1
            number_of_replicas: 0
            refresh_interval: 2s
        status_code:
          - 201
          - 200
      run_once: true

    - name: Create a role for a user to only view the dashboards
      uri:
        url: "{{elasticsearch_host}}.security-6/doc/role-read_dashboard"
        body_format: json
        method: PUT
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_password }}"
        body: "{{ lookup('file','security_role_dashboard.json') }}"
        status_code:
          - 201
          - 200

    - name: Create the dashboard user with the credentials "admin" and "password"
      uri:
        url: "{{elasticsearch_host}}.security-6/doc/user-admin"
        body_format: json
        method: PUT
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_password }}"
        body: "{{ lookup('file','security_user_dashboard.json') }}"
        status_code:
          - 201
          - 200


    # Auditbeat
    - name: Install Auditbeat
      apt: deb={{ elastic_download }}/downloads/beats/auditbeat/auditbeat-{{ elastic_version }}-amd64.deb

    - name: Change the Auditbeat configuration
      template: src=templates/auditbeat.yml dest=/etc/auditbeat/auditbeat.yml

    - name: Restart Auditbeat and make sure it autostarts
      service: name=auditbeat state=restarted enabled=yes


    # Filebeat
    - name: Install Filebeat
      apt: deb={{ elastic_download }}/downloads/beats/filebeat/filebeat-{{ elastic_version }}-amd64.deb

    - name: Create (or replace) the Keystore for Filebeat
      shell: filebeat keystore create --force

    - name: Add (or overwrite) the Elasticsearch password for Filebeat
      command: filebeat keystore add ES_PWD --stdin --force
      args:
        stdin: "{{ elasticsearch_password }}"

    - name: Change the Filebeat configuration
      template: src=templates/filebeat.yml dest=/etc/filebeat/filebeat.yml

    - name: Restart Filebeat and make sure it autostarts
      service: name=filebeat state=restarted enabled=yes


    # Heartbeat
    - name: Install Heartbeat
      apt: deb={{ elastic_download }}/downloads/beats/heartbeat/heartbeat-{{ elastic_version }}-amd64.deb

    - name: Change the Heartbeat configuration
      template: src=templates/heartbeat.yml dest=/etc/heartbeat/heartbeat.yml

    - name: Restart Heartbeat and make sure it autostarts
      service: name=heartbeat-elastic state=restarted enabled=yes


    # Metricbeat
    - name: Install Metricbeat
      apt: deb={{ elastic_download }}/downloads/beats/metricbeat/metricbeat-{{ elastic_version }}-amd64.deb

    - name: Change the Metricbeat configuration
      template: src=templates/metricbeat.yml dest=/etc/metricbeat/metricbeat.yml

    - name: Restart Metricbeat and make sure it autostarts
      service: name=metricbeat state=restarted enabled=yes

    #- name: Set metricbeat-* as the default index pattern
    #  uri:
    #    url: "{{kibana_host}}api/kibana/settings/defaultIndex"
    #    body_format: json
    #    method: POST
    #    user: "{{ elasticsearch_user }}"
    #    password: "{{ elasticsearch_password }}"
    #    headers:
    #      kbn-xsrf: kibana
    #    body:
    #      value: metricbeat-*
    #    status_code:
    #      - 201
    #      - 200
    #  run_once: true


    # Packetbeat
    - name: Install Packetbeat
      apt: deb={{ elastic_download }}/downloads/beats/packetbeat/packetbeat-{{ elastic_version }}-amd64.deb

    - name: Change the Packetbeat configuration
      template: src=templates/packetbeat.yml dest=/etc/packetbeat/packetbeat.yml

    - name: Restart Packetbeat and make sure it autostarts
      service: name=packetbeat state=restarted enabled=yes


    # nginx
    - name: Install nginx
      apt: name=nginx

    - name: Stop nginx so that Certbot can bind to port 80
      service: name=nginx state=stopped

    - name: Add the certbot repository
      apt_repository: repo="ppa:certbot/certbot"

    - name: Install certbot and update the cache for the new PPA
      apt: name=python-certbot-nginx update_cache=yes

    - name: Add domains to the certificate
      set_fact:
        certificates:
          - "{{ inventory_hostname }}"
          - "{{ domain }}"
          - "www.{{ domain }}"
          - "kibana.{{ domain }}"
          - "dashboard.{{ domain }}"

    - name: Create the certificate
      command: >
        certbot certonly --non-interactive --standalone
        --agree-tos --email admin@{{ domain }}
        -d {{ certificates | join(',') }}
        creates=/etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem

    - name: Add crontab to renew certificates every second month on Sunday night
      cron: minute="30" hour="3" weekday="0" month="*/2" job="service nginx stop && certbot renew >> /var/log//var/log/letsencrypt/renew.log && service nginx start"

    - name: Generate strong dhparams, but only if the file doesn't exist
      command: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 creates=/etc/ssl/certs/dhparam.pem

    - name: Set a global TLS configuration
      template: src=templates/tls.conf dest=/etc/nginx/tls.conf

    - name: Change the nginx configuration
      template: src=templates/nginx.conf dest=/etc/nginx/sites-available/default

    - name: Provide an HTML index
      template: src=templates/index.html dest=/var/www/html/index.html

    - name: Restart nginx and make sure it autostarts
      service: name=nginx state=restarted enabled=yes

    - name: Check HTTP
      uri:
        url: "http://{{ inventory_hostname }}"
        follow_redirects: none
        status_code: 301
      register: response
      retries: 3
      delay: 2
      delegate_to: 127.0.0.1
      become: false

    - name: Fail if HTTP is not being redirected to HTTPS
      fail:
      when: response.status != 301

    - name: Check HTTPS
      openssl_certificate:
        path: /etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem
        provider: assertonly
        issuer:
          O: Let's Encrypt
        has_expired: false
        subject_alt_name:
          - "DNS:{{ inventory_hostname }}"

    - name: Check HTTPS apex
      openssl_certificate:
        path: /etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem
        provider: assertonly
        issuer:
          O: Let's Encrypt
        has_expired: false
        subject_alt_name:
          - "DNS:{{ domain }}"
      when: inventory_hostname == "frontend." + domain
